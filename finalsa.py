# -*- coding: utf-8 -*-
"""FinalSA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1At0B4tpK8bk2pwEioW4Zx3Sjs5mT4rYF
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import re
import nltk

#loading the data
df = pd.read_csv('train-v2.tsv', sep='\t',header= None)

df.info()

df.columns = ['class','tweet']

#  removing @USER
df['tweet'] = df['tweet'].str.replace('@USER','')

# removing special characters , puntuations and numbers
df['tweet'] = df['tweet'].str.replace("[^a-zA-Z#]", " ")

#stopwords in welsh
stop = ['a' ,'am', 'mewm gwirionedd', 'bron', 'hefyd', 'er', 'bob amser', 'yn', 'an', 'a', 'unrhyw', 'yn', 'fel', 'yn', 'death', 'dod', 'ond', 'gan', 'can', 'gwnaeth', 'gwneud', 'yn gwneud', 'yr un', 'chwaith', 'arall', 'canys', 'rhag', 'wedi', 'cael', 'hyny', 'sut', 'ff', 'mewn', 'yn', 'maeâ€™n', 'ei', 'os', 'yn unig', 'gall', 'efallai', 'mi', 'nerth', 'mwynglawdd', 'rhaid', 'fy', 'nac ychwaith', 'o', 'iawn', 'pryd', 'lle', 'tra', 'lle bynnag', 'pryd bynnag', 'boed', 'sydd', 'tra', 'sefydliad lechyd y byd', 'pwy', 'pwy bynnag', 'y', 'mae ei', 'pam', 'ewyllys', 'gyda', 'fewn', 'heb', 'byddai', 'oes', 'eto', 'ti', 'eich']

## refered from https://www.youtube.com/watch?v=RLfUyn3HoaE&t=1489s

# individual words are considered as tokens 
tokenized_tweet = df['tweet'].apply(lambda x:x.split())
tokenized_tweet.head()

#Joining the words
for i in range(len(tokenized_tweet)):
  tokenized_tweet[i] = " ".join(tokenized_tweet[i])
df['tweet'] = tokenized_tweet

#extracting the features
from sklearn.feature_extraction.text import CountVectorizer
bagofwords_vectorizer = CountVectorizer(stop_words=stop)
bagofwords = bagofwords_vectorizer.fit_transform(df['tweet'])

bagofwords[0].toarray()

# spliting the data
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(bagofwords,df['class'], random_state=467, test_size=0.30)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score , f1_score

#grid search
from sklearn.model_selection import GridSearchCV
para = {'C' : [0,0.1,0.0001,1,10],"penalty":["l1","l2"]}
grid = GridSearchCV(LogisticRegression(max_iter=1000),para)
grid.fit(x_train,y_train)
grid.best_estimator_

#training the data
model = LogisticRegression(C=0.1,max_iter=1000)
model.fit(x_train,y_train)

#testing the data
predict = model.predict(x_test)

#f1 score 
f1_score(y_test, predict)

#accuracy score
accuracy_score(y_test,predict)